(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{428:function(a,s,e){"use strict";e.r(s);var t=e(27),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker-入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-入门"}},[a._v("#")]),a._v(" Docker 入门")]),a._v(" "),e("h2",{attrs:{id:"镜像加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像加速"}},[a._v("#")]),a._v(" 镜像加速")]),a._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[a._v("# /etc/docker/daemon.json\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[a._v('"registry-mirrors"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://dockerhub.azk8s.cn"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://reg-mirror.qiniu.com"')]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("重启")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("$ systemctl daemon"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("reload\n$ systemctl restart docker\n")])])]),e("h2",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[a._v("#")]),a._v(" Dockerfile")]),a._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# image 文件构建阶段执行，执行结果会被打包进入 image 文件")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" npm install\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 容器启动后执行")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("CMD")]),a._v(" node index.js\n")])])]),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[a._v("#")]),a._v(" 常用命令")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("service docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),a._v("                             "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 开启docker服务")]),a._v("\nsystemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),a._v(" docker                           "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动 docker 后台服务")]),a._v("\nsystemctl daemon"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("reload                          "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重启docker守护进程")]),a._v("\nsystemctl restart docker                         "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重启docker服务")]),a._v("\ndocker pull jenkins"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jenkins                      "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker拉取镜像")]),a._v("\ndocker images                                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看镜像列表")]),a._v("\ndocker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("a                                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看容器,不加-a查看正在运行的，加上-a查看所有容器                   ")]),a._v("\ndocker stop "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[container ID/alias]")]),a._v("                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 关闭一个已启动容器 ")]),a._v("\ndocker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[container ID/alias]")]),a._v("                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动一个关闭的容器 ")]),a._v("\ndocker restart "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[container ID/alias]")]),a._v("              "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重启容器 ")]),a._v("\ndocker inspect "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[container ID/alias]")]),a._v("              "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#/ 查看一个容器的详情 ")]),a._v("\ndocker exec "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("it "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[container ID/alias]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("bin"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("bash    "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 进入容器内部")]),a._v("\ndocker logs "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[container ID/alias]")]),a._v("\n")])])]),e("h3",{attrs:{id:"资源清理命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资源清理命令"}},[a._v("#")]),a._v(" 资源清理命令")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[container id]")]),a._v("                         "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除容器")]),a._v("\ndocker rmi "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[image id]")]),a._v("                            "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除镜像")]),a._v("\ndocker rmi REPOSITORY"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("TAR                        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除镜像 例：docker rmi button-api/v2     ")]),a._v("\n")])])]),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("docker container prune "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除所有退出状态的容器")]),a._v("\ndocker volume prune "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除未被使用的数据卷")]),a._v("\ndocker image prune "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除 dangling 或所有未被使用的镜像")]),a._v("\n\ndocker system prune "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#删除已停止的容器、dangling 镜像、未被容器引用的 network 和构建过程中的 cache")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安全起见，这个命令默认不会删除那些未被任何容器引用的数据卷，如果需要同时删除这些数据卷，你需要显式的指定 --volumns 参数")]),a._v("\ndocker system prune "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("all "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("force "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("volumns "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#这次不仅会删除数据卷，而且连确认的过程都没有了！注意，使用 --all 参数后会删除所有未被引用的镜像而不仅仅是 dangling 镜像")]),a._v("\n")])])]),e("h3",{attrs:{id:"image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#image"}},[a._v("#")]),a._v(" image")]),a._v(" "),e("ul",[e("li",[e("p",[e("code",[a._v("docker image ls")])])]),a._v(" "),e("li",[e("p",[e("code",[a._v("docker image rm [option] <imageid>")])])])]),a._v(" "),e("h3",{attrs:{id:"container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#container"}},[a._v("#")]),a._v(" container")]),a._v(" "),e("ul",[e("li",[e("p",[e("code",[a._v("docker container start")])]),a._v(" "),e("p",[a._v("生成/启动容器，但不会重复生成容器；；； docker container run 会重复生成")])])]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("$ docker container "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[containerID]")]),a._v("\n")])])]),e("p",[a._v("更多参数:")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ：在后台运行\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("it : 容器的 shell 映射到当前的 shell ， 然后在本机窗口输入命令，会传入容器\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("p 80:3000 ：将容器的 3000 端口映射到宿主机的 80 端口\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" : 容器停止运行后，自动删除容器文件\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("name xxx : 容器名字为 xxx\n")])])]),e("ul",[e("li",[e("p",[e("code",[a._v("docker container stop")])]),a._v(" "),e("p",[a._v("终止容器运行，相当于先发起 SIGTERM 信号，过段时间再发出 SIGKILL；；docker container kill 会直接发出 sigkill")])])]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("$ docker container stop "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[containerID]")]),a._v("\n")])])]),e("ul",[e("li",[e("p",[e("code",[a._v("docker container exec")])]),a._v(" "),e("p",[a._v("进入一个正在运行的 docker 容器")])])]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("$ docker container exec "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("it "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[containerID]")]),a._v(" bash\n")])])]),e("p",[a._v("通过 "),e("code",[a._v("ctrl + p +q")]),a._v(" 可以推出当前容器且不会关闭容器")]),a._v(" "),e("ul",[e("li",[e("p",[e("code",[a._v("docker container cp")])]),a._v(" "),e("p",[a._v("从正在运行的 Docker 容器里，将文件拷贝到本机")])])]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("$ docker container "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[containID]")]),a._v(":"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("to"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n")])])]),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" mysql:"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("lib"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("mysql "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("own"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("mysqldata\n")])])]),e("ul",[e("li")]),a._v(" "),e("h2",{attrs:{id:"docker-build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-build"}},[a._v("#")]),a._v(" docker build")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("$ docker build "),e("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("[OPTIONS]")]),a._v(" PATH "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),a._v(" URL "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("\n")])])]),e("p",[a._v("exapmle")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[a._v("docker build "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("t my"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("image "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("f Dockerfile "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n")])])]),e("h2",{attrs:{id:"数据挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据挂载"}},[a._v("#")]),a._v(" 数据挂载")]),a._v(" "),e("p",[a._v("数据挂载有三种方式")]),a._v(" "),e("h3",{attrs:{id:"volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[a._v("#")]),a._v(" volume")]),a._v(" "),e("p",[a._v("是由docker默认及推荐的挂载方式，volume由docker直接管理，同一个volume可以共享给多个容器使用，volume和容器的生命周期完全独立，容器删除时volume仍然存在。")]),a._v(" "),e("p",[a._v("缺点：volume 在宿主机上比较难定位，在宿主机上直接操作 volume 比较困难。")]),a._v(" "),e("h3",{attrs:{id:"bind-mount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind-mount"}},[a._v("#")]),a._v(" bind mount")]),a._v(" "),e("p",[a._v("是直接将宿主机文件系统上的文件路径映射到容器中，两边双向同步。")]),a._v(" "),e("p",[a._v("优点：可以直接访问，也可以被别的程序使用")]),a._v(" "),e("p",[a._v("缺点：可以把任何文件路径使用bind mount的方式绑定到容器中，这样有可能一些安全问题。")]),a._v(" "),e("h3",{attrs:{id:"tmpfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tmpfs"}},[a._v("#")]),a._v(" tmpfs")]),a._v(" "),e("p",[a._v("使用宿主机的内存作为存储，不会写到宿主机的文件系统中，和前两种区别较大。")]),a._v(" "),e("h2",{attrs:{id:"docker-网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络"}},[a._v("#")]),a._v(" docker 网络")]),a._v(" "),e("h3",{attrs:{id:"host-网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#host-网络"}},[a._v("#")]),a._v(" host 网络")]),a._v(" "),e("p",[a._v("将与宿主机共享网络，不需要再使用 -p 指定暴露接口。容器暴露的端口直接暴露的宿主机上。")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用 host 网络")]),a._v("\n$ docker run "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("network host \\\nnginx\n")])])]),e("h3",{attrs:{id:"bridge-网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bridge-网络"}},[a._v("#")]),a._v(" bridge 网络")]),a._v(" "),e("p",[a._v("默认就是 bridge 网络。docker 在宿主机上创建了 docker0 的网桥")]),a._v(" "),e("div",{staticClass:"language-powershell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-powershell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看")]),a._v("\n$ ip addr show docker0\n")])])]),e("p",[a._v("可以发现宿主机的IP是"),e("code",[a._v("172.17.0.1")]),a._v(" 。就可以在nginx 容器中，通过这个ip 反向代理到宿主机")]),a._v(" "),e("h2",{attrs:{id:"alpine-镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#alpine-镜像"}},[a._v("#")]),a._v(" Alpine 镜像")]),a._v(" "),e("p",[a._v("Alpine 镜像构建的容器，进入用不了bash ，用 sh")])])}),[],!1,null,null,null);s.default=r.exports}}]);