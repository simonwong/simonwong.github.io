(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{418:function(t,a,s){"use strict";s.r(a);var e=s(27),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"javascript语言是如何构建起来的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript语言是如何构建起来的"}},[t._v("#")]),t._v(" JavaScript语言是如何构建起来的")]),t._v(" "),s("h2",{attrs:{id:"delete-0-javascript中到底有什么是可以销毁的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete-0-javascript中到底有什么是可以销毁的"}},[t._v("#")]),t._v(" delete 0：JavaScript中到底有什么是可以销毁的")]),t._v(" "),s("h3",{attrs:{id:"到底在删什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#到底在删什么"}},[t._v("#")]),t._v(" 到底在删什么")]),t._v(" "),s("p",[t._v("JavaScript认为“"),s("strong",[t._v("所有删除值的delete就直接返回true")]),t._v("”，返回值只表明执行过程中没有异常")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[s("strong",[t._v("delete 正式语法设计并不是“删除某个东西”，而是“删除一个表达式的结果”")]),t._v(" "),s("code",[t._v("delete UnaryExpression")])]),t._v(" "),s("p",[t._v("是在"),s("strong",[t._v("删除一个表达式的、引用类型的结果（Result）")]),t._v("，而不是在"),s("strong",[t._v("删除x表达式")]),t._v("，或者这个"),s("strong",[t._v("删除表达式的值（Value）")])]),t._v(" "),s("h3",{attrs:{id:"表达式的结果是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式的结果是什么"}},[t._v("#")]),t._v(" 表达式的结果是什么")]),t._v(" "),s("p",[t._v("所有一切表达式运算的终极目的都是为了得到一个值。"),s("strong",[t._v("表达式的值，在ECMAScript的规范中，称为“引用”")])]),t._v(" "),s("p",[s("code",[t._v("delete 0")]),t._v(" JavaScript将0视为一个表达式，并尝试删除它的求值结果。")]),t._v(" "),s("p",[t._v("ECMAScript约定："),s("strong",[t._v("任何表达式计算的结果（Result）要么是一个值，要么是一个引用。并且需要留意的是，在这个描述中，所谓对象，其实也是值。准确地说，是“非引用类型”")])]),t._v(" "),s("p",[t._v("“引用”是可以转换为“值”，以便参与值运算的。"),s("strong",[t._v("因为表达式的本质是求值运算，所以引用是不能直接作为最终求值的操作数的")])]),t._v(" "),s("p",[t._v("这依赖于一个非常核心的、称为“GetValue()”的内部操作。")]),t._v(" "),s("p",[s("strong",[t._v("所有赋值操作的含义，是将右边的“值”，赋给左边用于包含该值的“引用”")])]),t._v(" "),s("p",[s("code",[t._v("x = x")]),t._v(" 被翻译为 "),s("code",[t._v("x = GetValue(x)")])]),t._v(" "),s("p",[t._v("所以，“delete x”归根到底，")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("delete 0")]),t._v(" 的本质是删除一个表达式的值（Result）")]),t._v(" "),s("li",[s("code",[t._v("delete x")]),t._v(" 与上述的区别只在于 Result 是一个引用（Reference）")]),t._v(" "),s("li",[t._v("delete其实只能删除一种引用，即对象的成员（Property）")])]),t._v(" "),s("p",[t._v("只有在"),s("code",[t._v("delete x")]),t._v("等值于"),s("code",[t._v("delete obj.x")]),t._v("时delete才会有执行意义。例如"),s("code",[t._v("with (obj) ...")]),t._v("语句中的delete x，以及全局属性global.x")]),t._v(" "),s("h2",{attrs:{id:"var-x-y-100-声明语句与语法改变了javascript语言核心性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-x-y-100-声明语句与语法改变了javascript语言核心性质"}},[t._v("#")]),t._v(" var x = y = 100：声明语句与语法改变了JavaScript语言核心性质")]),t._v(" "),s("p",[t._v("JavaScript只有变量和常量两种标识符，六条声明语句中：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("let")]),t._v(" "),s("strong",[t._v("x")]),t._v(" … 声明变量x。不可在赋值之前读。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("const")]),t._v(" "),s("strong",[t._v("x")]),t._v(" … 声明常量x。不可写。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("var")]),t._v(" "),s("strong",[t._v("x")]),t._v(" … 声明变量x。在赋值之前可读取到undefined值。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("function")]),t._v(" "),s("strong",[t._v("x")]),t._v(" … 声明变量x。该变量指向一个函数。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("class")]),t._v(" "),s("strong",[t._v("x")]),t._v(" … 声明变量x。该变量指向一个类（该类的作用域内部是处理严格模式的）。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("import")]),t._v(" … 导入标识符并作为常量")])])]),t._v(" "),s("p",[t._v("还有两个语句有潜在的声明标识符的能力，声明只是它们的语法效果")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("**for (var/let/const x …) **… for语句有多种语法来声明一个或多个标识符，用作循环变量。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("try")]),t._v(" … "),s("strong",[t._v("catch")]),t._v(" ("),s("strong",[t._v("x")]),t._v(") … catch 子句可以声明一个或多个标识符，用作异常对象变量。")])])]),t._v(" "),s("p",[t._v("由于标识符是在用户代码执行之前就已经由静态分析得到，并且创建在环境中，因此let声明的变量和var声明的变量在这一点上没有不同：它们都是在读取一个“已经存在的”标识符名。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("let x = 1")]),t._v(" 之前访问 x 抛异常，并不是不存在，而是这个标识符被拒绝访问了。")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript环境在创建一个“变量名（varName in varDecls）”后，会为它初始化绑定一个undefined值，而”词法名字（lexicalNames）”在创建之后就没有这项待遇，所以它们在缺省情况下就是“还没有绑定值”的标识符。")])]),t._v(" "),s("p",[t._v("6种声明语句中的函数是按varDecls的规则声明的；类的内部是处于严格模式中，它的名字是按let来处理的，而import导入的名字则是按const的规则来处理的。所以，所有的声明本质上只有三种处理模式：var变量声明、let变量声明和const常量声明。")]),t._v(" "),s("h3",{attrs:{id:"赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值"}},[t._v("#")]),t._v(" 赋值")]),t._v(" "),s("p",[t._v("在JavaScript中，一个赋值表达式的左边和右边其实“都是”表达式！")]),t._v(" "),s("p",[t._v("也就是将右操作数（的值）赋给左操作数（的引用）"),s("code",[t._v("lRef = rValue")])]),t._v(" "),s("h3",{attrs:{id:"向一个不存在的变量赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向一个不存在的变量赋值"}},[t._v("#")]),t._v(" 向一个不存在的变量赋值")]),t._v(" "),s("p",[t._v("ECMAScript规定在这个全局对象之外再"),s("strong",[t._v("维护一个变量名列表（varNames）")]),t._v("，所有在静态语法分析期或在eval()中使用"),s("code",[t._v("var")]),t._v("声明的变量名就被放在这个列表中。然后约定，这个变量名列表中的变量是“直接声明的变量”，不能使用"),s("code",[t._v("delete")]),t._v("删除（eval 声明的 变量可以被删除）。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `a`和`x`都是global的属性")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 100, writable: true, enumerable: true, configurable: false }")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 200, writable: true, enumerable: true, configurable: true }")]),t._v("\n")])])]),s("p",[s("code",[t._v("var x = y = 1")])]),t._v(" "),s("p",[t._v("x 和 y 是两个不同的东西，前者是声明的名字，后者是一个赋值过程可能创建的变量名")]),t._v(" "),s("p",[s("code",[t._v("y = 1")]),t._v(" 部分“"),s("strong",[t._v("被实现未一种赋值操作")]),t._v("”，并不是说“它是一种赋值操作”")]),t._v(" "),s("h2",{attrs:{id:"a-x-a-n-2-一道被无数人无数次地解释过的经典面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-x-a-n-2-一道被无数人无数次地解释过的经典面试题"}},[t._v("#")]),t._v(" a.x = a = {n:2}：一道被无数人无数次地解释过的经典面试题")]),t._v(" "),s("p",[t._v("JavaScript总是严格按照从左至右的顺序来计算表达式。--- 《javascript 权威指南》")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("第一行，只存在一个赋值操作，因为“var x = …”是"),s("strong",[t._v("值绑定操作")]),t._v("，"),s("code",[t._v("y = 100")]),t._v(" 才是")]),t._v(" "),s("p",[t._v("第二行，是连续两个赋值操作。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("发生了两次赋值，第一次赋值发生于“"),s("code",[t._v("a = {n: 2}")]),t._v("”，它覆盖了“原始的变量 a ”；")]),t._v(" "),s("p",[t._v("第二次赋值发生于被“"),s("code",[t._v("a.x")]),t._v("”引用暂存的“"),s("strong",[t._v("原始的变量a”（n 还是 1 的那个 a）")])]),t._v(" "),s("p",[t._v("用下面的代码就看的通了")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e undefined")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {n:2}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);