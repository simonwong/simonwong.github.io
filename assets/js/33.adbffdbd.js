(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{454:function(t,a,r){"use strict";r.r(a);var s=r(27),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),r("p",[t._v("创建型设计模式抽象了实例化过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。")]),t._v(" "),r("h2",{attrs:{id:"abstract-factory-抽象工厂-对象创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#abstract-factory-抽象工厂-对象创建型模式"}},[t._v("#")]),t._v(" Abstract Factory（抽象工厂）—— 对象创建型模式")]),t._v(" "),r("h3",{attrs:{id:"意图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[t._v("#")]),t._v(" 意图")]),t._v(" "),r("p",[t._v("提供一个接口以创建一系列相关或相互依赖的对象，而无须指定它们具体的类。")]),t._v(" "),r("h3",{attrs:{id:"适用性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#适用性"}},[t._v("#")]),t._v(" 适用性")]),t._v(" "),r("p",[t._v("一下情况使用 Abstract Factory 模式")]),t._v(" "),r("ul",[r("li",[t._v("一个系统要独立于它的产品的创建、组合和表示")]),t._v(" "),r("li",[t._v("一个系统要由多个产品系列中的一个来配置")]),t._v(" "),r("li",[t._v("要强调一系列相关的产品对象的设计以便行进联合使用")]),t._v(" "),r("li",[t._v("提供一个产品类库，但只想显示它们的接口而不是实现")])])])}),[],!1,null,null,null);a.default=e.exports}}]);